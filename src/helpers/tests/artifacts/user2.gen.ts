/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from "mongoose";

/**
 * Lean version of User2AddressDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `User2Document.toObject()`.
 * ```
 * const user2Object = user2.toObject();
 * ```
 */
export type User2Address = {
city: string;
}

/**
 * Lean version of User2Document
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `User2Document.toObject()`. To avoid conflicts with model names, use the type alias `User2Object`.
 * ```
 * const user2Object = user2.toObject();
 * ```
 */
export type User2 = {
_id: number;
lastOnlineAt?: Date;
updatedAt?: Date;
createdAt?: Date;
address: User2Address;
}

/**
 * Mongoose Document type
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User2 = mongoose.model<User2Document, User2Model>("User2", User2Schema);
 * ```
 */
export type User2AddressDocument = mongoose.Document<number> & {
city: string;
}

/**
 * Lean version of User2Document (type alias of `User2`)
 * 
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { User2 } from "../models"
 * import { User2Object } from "../interfaces/mongoose.gen.ts"
 * 
 * const user2Object: User2Object = user2.toObject();
 * ```
 */
export type User2Object = User2

/**
 * Mongoose Query types
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User2 = mongoose.model<User2Document, User2Model>("User2", User2Schema);
 * ```
 */
export type User2Queries = {
}

export type User2Methods = {
}

export type User2Statics = {
}

/**
 * Mongoose Model type
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User2 = mongoose.model<User2Document, User2Model>("User2", User2Schema);
 * ```
 */
export type User2Model = mongoose.Model<User2Document, User2Queries> & User2Statics

/**
 * Mongoose Schema type
 * 
 * Assign this type to new User2 schema instances:
 * ```
 * const User2Schema: User2Schema = new mongoose.Schema({ ... })
 * ```
 */
export type User2Schema = mongoose.Schema<User2Document, User2Model>

/**
 * Mongoose Document type
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User2 = mongoose.model<User2Document, User2Model>("User2", User2Schema);
 * ```
 */
export type User2Document = mongoose.Document<number, User2Queries> & User2Methods & {
_id: number;
lastOnlineAt?: Date;
updatedAt?: Date;
createdAt?: Date;
address: User2AddressDocument;
}

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 * 
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper types used by `NestedPopulatedDocument`.
 * Returns the parent & child properties respectively, for a string representing a nested property (i.e. `friend.user`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never;
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never;
 
/**
 * Helper type used by `PopulatedDocument` to populate nested properties (i.e. `friend.user`).
 */
type NestedPopulatedDocument<
DocType extends mongoose.Document,
T
> = ParentProperty<T> extends keyof DocType 
  ? ChildProperty<T> extends keyof DocType[ParentProperty<T>]
    ? Omit<DocType, ParentProperty<T>> &
      { 
        [ref in ParentProperty<T>]: Omit<DocType[ParentProperty<T>], ChildProperty<T>> & { 
          [ref in ChildProperty<T>]: Exclude<DocType[ParentProperty<T>][ChildProperty<T>], mongoose.Types.ObjectId> 
        } 
      }
    : DocType 
  : DocType;

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 * 
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType extends mongoose.Document, T> = T extends keyof DocType ? Omit<DocType, T> & { [ref in T]: Exclude<DocType[T], mongoose.Types.ObjectId> } : NestedPopulatedDocument<DocType, T>;

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module "mongoose" {
  interface Query<ResultType, DocType extends Document, THelpers = {}> {
    populate<T extends string>(path: T, select?: string | any, model?: string | Model<any, THelpers>, match?: any): Query<
      ResultType extends Array<DocType> ? Array<PopulatedDocument<Unarray<ResultType>, T>> : (ResultType extends DocType ? PopulatedDocument<Unarray<ResultType>, T> : ResultType),
      DocType,
      THelpers
    > & THelpers;

    populate<T extends string>(options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>): Query<
      ResultType extends Array<DocType> ? Array<PopulatedDocument<Unarray<ResultType>, T>> : (ResultType extends DocType ? PopulatedDocument<Unarray<ResultType>, T> : ResultType),
      DocType,
      THelpers
    > & THelpers;
  }
}

