export const MAIN_HEADER = `/* tslint:disable */\n/* eslint-disable */\n\n// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //\n\n// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.`;
export const MONGOOSE_IMPORT = `import mongoose from "mongoose";`;

export const POPULATE_HELPERS = `/**
 * Check if a property on a document is populated:
 * \`\`\`
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 * 
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * \`\`\`
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper types used by \`NestedPopulatedDocument\`.
 * Returns the parent & child properties respectively, for a string representing a nested property (i.e. \`friend.user\`)
 */
type ParentProperty<T> = T extends \`\${infer P}.\${string}\` ? P : never;
type ChildProperty<T> = T extends \`\${string}.\${infer C}\` ? C : never;
 
/**
 * Helper type used by \`PopulatedDocument\` to populate nested properties (i.e. \`friend.user\`).
 */
type NestedPopulatedDocument<
DocType extends mongoose.Document,
T
> = ParentProperty<T> extends keyof DocType 
  ? ChildProperty<T> extends keyof DocType[ParentProperty<T>]
    ? Omit<DocType, ParentProperty<T>> &
      { 
        [ref in ParentProperty<T>]: Omit<DocType[ParentProperty<T>], ChildProperty<T>> & { 
          [ref in ChildProperty<T>]: Exclude<DocType[ParentProperty<T>][ChildProperty<T>], mongoose.Types.ObjectId> 
        } 
      }
    : DocType 
  : DocType;

/**
 * Populate properties on a document type:
 * \`\`\`
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 * 
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * \`\`\`
 */
export type PopulatedDocument<DocType extends mongoose.Document, T> = T extends keyof DocType ? Omit<DocType, T> & { [ref in T]: Exclude<DocType[T], mongoose.Types.ObjectId> } : NestedPopulatedDocument<DocType, T>;

`;

export const QUERY_POPULATE = `/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module "mongoose" {
  interface Query<ResultType, DocType extends Document, THelpers = {}> {
    populate<T extends string>(path: T, select?: string | any, model?: string | Model<any, THelpers>, match?: any): Query<
      ResultType extends Array<DocType> ? Array<PopulatedDocument<Unarray<ResultType>, T>> : (ResultType extends DocType ? PopulatedDocument<Unarray<ResultType>, T> : ResultType),
      DocType,
      THelpers
    > & THelpers;

    populate<T extends string>(options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>): Query<
      ResultType extends Array<DocType> ? Array<PopulatedDocument<Unarray<ResultType>, T>> : (ResultType extends DocType ? PopulatedDocument<Unarray<ResultType>, T> : ResultType),
      DocType,
      THelpers
    > & THelpers;
  }
}`;

export const getObjectDocs = (modelName: string) => `/**
 * Lean version of ${modelName}Document (type alias of \`${modelName}\`)
 * 
 * Use this type alias to avoid conflicts with model names:
 * \`\`\`
 * import { ${modelName} } from "../models"
 * import { ${modelName}Object } from "../interfaces/mongoose.gen.ts"
 * 
 * const ${modelName.toLowerCase()}Object: ${modelName}Object = ${modelName.toLowerCase()}.toObject();
 * \`\`\`
 */`;

export const getQueryDocs = (modelName: string) => `/**
 * Mongoose Query types
 * 
 * Pass this type to the Mongoose Model constructor:
 * \`\`\`
 * const ${modelName} = mongoose.model<${modelName}Document, ${modelName}Model>("${modelName}", ${modelName}Schema);
 * \`\`\`
 */`;

export const getModelDocs = (modelName: string) => `/**
 * Mongoose Model type
 * 
 * Pass this type to the Mongoose Model constructor:
 * \`\`\`
 * const ${modelName} = mongoose.model<${modelName}Document, ${modelName}Model>("${modelName}", ${modelName}Schema);
 * \`\`\`
 */`;

export const getDocumentDocs = (modelName: string) => `/**
 * Mongoose Document type
 * 
 * Pass this type to the Mongoose Model constructor:
 * \`\`\`
 * const ${modelName} = mongoose.model<${modelName}Document, ${modelName}Model>("${modelName}", ${modelName}Schema);
 * \`\`\`
 */`;

export const getSchemaDocs = (modelName: string) => `/**
 * Mongoose Schema type
 * 
 * Assign this type to new ${modelName} schema instances:
 * \`\`\`
 * const ${modelName}Schema: ${modelName}Schema = new mongoose.Schema({ ... })
 * \`\`\`
 */`;

// If model is a subdoc, pass `fullName`
export const getLeanDocs = (modelName: string, fullName?: string) => `/**
 * Lean version of ${fullName ?? modelName}Document
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from \`${modelName}Document.toObject()\`.${
  !fullName || modelName === fullName ?
    ` To avoid conflicts with model names, use the type alias \`${modelName}Object\`.` :
    ""
}
 * \`\`\`
 * const ${modelName.toLowerCase()}Object = ${modelName.toLowerCase()}.toObject();
 * \`\`\`
 */`;

export const getSubdocumentDocs = (modelName: string, path: string) => `/**
 * Mongoose Embedded Document type
 * 
 * Type of \`${modelName}Document["${path}"]\` element.
 */`;
